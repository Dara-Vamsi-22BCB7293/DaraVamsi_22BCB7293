1. Find the total revenue (price Ã— quantity) for each item, sorted from highest to lowest.

Ans: db.sales.aggregate([
  {
    $group: {
      _id: "$item",
      TotalRevenue: {
        $sum: { $multiply: ["$price", "$quantity"] }
      }
    }
  },
  {
    $sort: { TotalRevenue: -1 }
  }
])


2. Calculate the total quantity sold per month in 2022.

Ans:

db.sales.aggregate([
  {
    $match: {
      date: {
        $gte: ISODate("2022-01-01T00:00:00Z"),
        $lt: ISODate("2023-01-01T00:00:00Z")
      }
    }
  },
  {
    $group: {
      _id: {
        year: { $year: "$date" },
        month: { $month: "$date" }
      },
      totalQuantity: { $sum: "$quantity" }
    }
  },
  {
    $sort: { "_id.year": 1, "_id.month": 1 }
  }
])



3. Find all items where price is greater than 10 and size is not 'Short'.

Ans:

db.sales.find({
  price: { $gt: 10 },
  size: { $ne: "Short" }
})


4. Get all Cappuccino sales with quantity between 10 and 20.

Ans:

db.sales.find({
  item: "Cappuccino",
  quantity: { $gte: 10, $lte: 20 }
})


5. Query to find items where the item name starts with "A".

Ans:

db.sales.find({
  item: { $regex: /^A/}
})

6. Find all records that do not have the field size.

Ans:

db.sales.find({size:{$exists:false}})


7. Find all sales that are either "Grande" or "Tall" but not "Americanos".

Ans:

db.sales.find({
  size: { $in: ["Grande", "Tall"] },
  item: { $ne: "Americanos" }
})


8. List all items sold in February 2022.

Ans:

db.sales.find({
  date: {
    $gte: ISODate("2022-02-01T00:00:00Z"),
    $lt: ISODate("2022-03-01T00:00:00Z")
  }
})


9. Find sales where the quantity is more than twice the price.

Ans:

db.sales.find({
  $where: "this.quantity > 2 * this.price"
})


10. Find all sales where the price is greater than the average price of their respective size.

Ans:

db.sales.aggregate([
  {
    $group: {
      _id: "$size",
      avgPrice: { $avg: "$price" }
    }
  }
])
db.sales.find({
  $where: function () {
    const avg = {
      "Short": 5.5,
      "Grande": 11.6667,
      "Tall": 13.3333
    };
    return this.price > avg[this.size];
  }
})


11. Find Sales Where the Day of Week Matches Quantity's Last Digit
[Filter sales where the day of the week (0=Sunday, 1=Monday, etc.) matches the last digit of quantity]

Ans:

db.sales.find({
  $where: function() {
    return this.date.getDay() === this.quantity % 10;
  }
})


12. Find Sales Where the Month is Prime and Quantity is Odd
[Filter sales where the month (1-12) is a prime number (2,3,5,7,11) AND quantity is odd]

Ans:

db.sales.find({
  $where: function () {
    const PrimeMonth = [2, 3, 5, 7, 11].includes(this.date.getMonth() + 1); 
    const OddQuantity = this.quantity % 2 === 1; 
    return PrimeMonth&& OddQuantity;
  }
})


13. Find Sales with "Suspicious Quantities" (Divisible by 5 or 7)
[Filter sales where quantity is divisible by 5 or 7]

Ans:

db.sales.find({
  $where: function() {
    return this.quantity % 5 === 0 || this.quantity % 7 === 0;
  }
})











